#include "ros/ros.h"
#include "std_msgs/String.h"
#include "nav_msgs/Odometry.h"
#include "sensor_msgs/PointCloud.h"
#include <Eigen/Eigen>
#include <tf/transform_listener.h>
#include <phantom_omni/OmniFeedback.h>
#include <phantom_omni/PhantomButtonEvent.h>
#include <sensor_msgs/JointState.h>
#include <dynamic_reconfigure/server.h>
#include <rosaria_nav/masterConfig.h>
#include <rosaria_nav/slaveConfig.h>
#include <geometry_msgs/Twist.h>

const double PI=3.14159265359;

class Controller
{	
	public:
		// params
		Eigen::Vector3d Kp;
		Eigen::Vector3d Kd;

		Eigen::Vector3d slave_to_master_scale;
		Eigen::Vector3d master_offset;

		Eigen::Vector3d master_to_slave_scale;
		Eigen::Vector3d slave_offset;

  		dynamic_reconfigure::Server<rosaria_nav::masterConfig> master_server;
  		dynamic_reconfigure::Server<rosaria_nav::masterConfig>::CallbackType master_callback_type;

  		dynamic_reconfigure::Server<rosaria_nav::slaveConfig> slave_server;
  		dynamic_reconfigure::Server<rosaria_nav::slaveConfig>::CallbackType slave_callback_type;

		Controller(ros::NodeHandle & n_,
			   bool is_master_,
			   double freq_, 
			   Eigen::Vector3d Kp_, 
                           Eigen::Vector3d Kd_, 
                           Eigen::Vector3d slave_to_master_scale_, 
                           Eigen::Vector3d master_offset_,
			   Eigen::Vector3d master_to_slave_scale_, 
                           Eigen::Vector3d slave_offset_) : 	      n(n_), 
								      is_master(is_master_),
							    	      freq(freq_), 
								      Kp(Kp_), 
								      Kd(Kd_), 
								      slave_to_master_scale(slave_to_master_scale_), 
								      master_offset(master_offset_), 
								      master_to_slave_scale(master_to_slave_scale_), 
								      slave_offset(slave_offset_), 
								      master_new_readings(false),
								      slave_new_readings(false),
								      control_event(false)
		{
			if(is_master)	
			{
				master_callback_type = boost::bind(&Controller::masterParamsCallback, this, _1, _2);
  				master_server.setCallback(master_callback_type);

				// Feedback publish
  				cmd_pub = n.advertise<phantom_omni::OmniFeedback>("/omni1_force_feedback", 1);
			}
			else
			{
				slave_callback_type = boost::bind(&Controller::slaveParamsCallback, this, _1, _2);
  				slave_server.setCallback(slave_callback_type);

				// Feedback publish
  				cmd_pub = n.advertise<geometry_msgs::Twist>("/RosAria/cmd_vel", 1);
			}

			// Master joint states subscriber
  			master_sub = n.subscribe<sensor_msgs::JointState>("/omni1_joint_states", 2, &Controller::masterJointsCallback, this);

  			// Slave pose and velocity subscriber
			slave_sub = n.subscribe("/RosAria/pose", 1, &Controller::slaveOdometryCallback, this);

			//
  			button_sub = n.subscribe<phantom_omni::PhantomButtonEvent>("/omni1_button", 1, &Controller::buttonCallback, this);



		}


		void masterParamsCallback(rosaria_nav::masterConfig &config, uint32_t level) 
		{
			ROS_INFO_STREAM("Master PID reconfigure Request ->" << " kp_x:" << config.kp_x
						 		     	    << " kp_y:" << config.kp_y
						 		            << " kp_z:" << config.kp_z
						 		      	    << " kd_x:" << config.kd_x
						 		      	    << " kd_y:" << config.kd_y
						 		      	    << " kd_z:" << config.kd_z);
			Kp=Eigen::Vector3d(config.kp_x,config.kp_y,config.kp_z);
			Kd=Eigen::Vector3d(config.kd_x,config.kd_y,config.kd_z);
		}

		void slaveParamsCallback(rosaria_nav::slaveConfig &config, uint32_t level) 
		{
			ROS_INFO_STREAM("Slave PID reconfigure Request ->"  << " kp_x:" << config.kp_x
						 		     	    << " kp_y:" << config.kp_y
						 		            << " kp_z:" << config.kp_z
						 		      	    << " kd_x:" << config.kd_x
						 		      	    << " kd_y:" << config.kd_y
						 		      	    << " kd_z:" << config.kd_z);

			Kp=Eigen::Vector3d(config.kp_x,config.kp_y,config.kp_z);
			Kd=Eigen::Vector3d(config.kd_x,config.kd_y,config.kd_z);
		}

		// ROS
		ros::NodeHandle n; 

  		ros::Subscriber master_sub;
		ros::Subscriber slave_sub;
		ros::Publisher cmd_pub;
		ros::Subscriber button_sub;

		bool is_master;

		double freq;

		bool master_new_readings;
		bool slave_new_readings;
		bool control_event;
		Eigen::Vector3d current_pose_slave;
		Eigen::Vector3d previous_pose_slave;

		Eigen::Vector3d current_pose_master;
		Eigen::Vector3d previous_pose_master;

		Eigen::Vector3d current_velocity_slave;


		// HAPTIC BUTTON
		void buttonCallback(const phantom_omni::PhantomButtonEvent::ConstPtr& button)
		{
		   if(button->grey_button==1 || button->white_button==1)
	     		control_event=true;
	   	   else 
	     		control_event=false;
		}

		// HAPTIC MEASUREMENTS
		void masterJointsCallback(const sensor_msgs::JointState::ConstPtr& joint_states)
		{
			// Need to consider button!!!
			double waist_joint=   joint_states->position[0];
			double shoulder_joint=joint_states->position[1];
			double elbow_joint=   joint_states->position[2];

			current_pose_master=Eigen::Vector3d(waist_joint, shoulder_joint, elbow_joint); // waist->Vx, shoulder->Vy, elbow->Vz

			//std::cout << current_pose_master.transpose() << std::endl;
			master_new_readings=true;
			if(slave_new_readings && control_event)
			{
				control();
			}
		}

		
		// ROBOT MEASUREMENTS
		void slaveOdometryCallback(const nav_msgs::Odometry::ConstPtr& msg)
		{
			current_pose_slave=Eigen::Vector3d((msg->pose.pose.position.x-slave_offset.x())*slave_to_master_scale.x() + master_offset.x(), 
							   (msg->pose.pose.position.y-slave_offset.y())*slave_to_master_scale.y() + master_offset.y(), 
							   (msg->pose.pose.position.z-slave_offset.z())*slave_to_master_scale.z() + master_offset.z());

			Eigen::Matrix<double,3,3> orientation=Eigen::Quaterniond(msg->pose.pose.orientation.w,
										 msg->pose.pose.orientation.x,
									         msg->pose.pose.orientation.y,
										 msg->pose.pose.orientation.z).matrix();

			current_velocity_slave=orientation*Eigen::Vector3d(msg->twist.twist.linear.x*slave_to_master_scale.x(), 
							                   msg->twist.twist.linear.y*slave_to_master_scale.y(), 
							                   msg->twist.twist.linear.z*slave_to_master_scale.z());

			//std::cout << "current vel:"<<current_velocity_slave.transpose() << std::endl;
			slave_new_readings=true;

			if(master_new_readings && control_event)
			{
				control();
			}
		}

		void control()
		{
			// Velocity master
			Eigen::Vector3d current_velocity_master((current_pose_master.x() - previous_pose_master.x()) * freq,
							        (current_pose_master.y() - previous_pose_master.y()) * freq,
		                                                (current_pose_master.z() - previous_pose_master.z()) * freq);
		
			Eigen::Matrix<double,3,3>  feeback_matrix = (current_pose_master     -  current_pose_slave)     * Kp.transpose() + 
								    (current_velocity_master -  current_velocity_slave) * Kd.transpose();
		
			std::cout << "position error:" << (current_pose_master - current_pose_slave).norm() << std::endl;
			std::cout << "velocity error:" << (current_velocity_master -  current_velocity_slave).norm() << std::endl;

			if(is_master)
			{
				phantom_omni::OmniFeedback force_msg;
				force_msg.force.x=feeback_matrix(0,0);
				force_msg.force.y=feeback_matrix(1,1);
				force_msg.force.z=feeback_matrix(2,2);
				cmd_pub.publish(force_msg);
			}
			else
			{
				geometry_msgs::Twist twist_msg;
				twist_msg.linear.x=feeback_matrix(0,0);
				twist_msg.linear.y=feeback_matrix(1,1);
				twist_msg.linear.z=feeback_matrix(2,2);

				twist_msg.angular.z=feeback_matrix(1,1); // UGV angular velocity is given by Y
				cmd_pub.publish(twist_msg);
			}
			


			previous_pose_slave=current_pose_slave;
			previous_pose_master=current_pose_master;
			master_new_readings=false;
			slave_new_readings=false;
		}
};



	

int main(int argc, char **argv)
{
  	/**
	* The ros::init() function needs to see argc and argv so that it can perform
	* any ROS arguments and name remapping that were provided at the command line. For programmatic
	* remappings you can use a different version of init() which takes remappings
	* directly, but for most command-line programs, passing argc and argv is the easiest
	* way to do it.  The third argument to init() is the name of the node.
	*
	* You must call one of the versions of ros::init() before using any other
	* part of the ROS system.
	*/
  	ros::init(argc, argv, "controller");
	/**
   	* NodeHandle is the main access point to communications with the ROS system.
   	* The first NodeHandle constructed will fully initialize this node, and the last
   	* NodeHandle destructed will close down the node.
   	*/
  	ros::NodeHandle n;
  	ros::NodeHandle n_priv("~");

	// parameters
	double freq; 
	double kp_x;
	double kp_y;
	double kp_z;

	double kd_x;
	double kd_y;
	double kd_z;

	double scale_x;
	double scale_y;
	double scale_z;


	//initialize operational parameters
    	n_priv.param<double>("frequency", freq, 10.0);

    	n_priv.param<double>("kp_x", kp_x, 1.0);
    	n_priv.param<double>("kp_y", kp_y, 1.0);
    	n_priv.param<double>("kp_z", kp_z, 1.0);

	Eigen::Vector3d kp(kp_x,kp_y,kp_z);

    	n_priv.param<double>("kd_x", kd_x, 1.0);
    	n_priv.param<double>("kd_y", kd_y, 1.0);
    	n_priv.param<double>("kd_z", kd_z, 1.0);

	Eigen::Vector3d kd(kd_x,kd_y,kd_z);

	double slave_workspace_min_x;
	double slave_workspace_min_y;
	double slave_workspace_min_z;
    	n_priv.param<double>("slave_workspace_min_x", slave_workspace_min_x, 1.0);
    	n_priv.param<double>("slave_workspace_min_y", slave_workspace_min_y, 1.0);
    	n_priv.param<double>("slave_workspace_min_z", slave_workspace_min_z, 1.0);
	Eigen::Vector3d slave_workspace_min(slave_workspace_min_x, slave_workspace_min_y, slave_workspace_min_z);
	double slave_workspace_max_x;
	double slave_workspace_max_y;
	double slave_workspace_max_z;
    	n_priv.param<double>("slave_workspace_max_x", slave_workspace_max_x, 1.0);
    	n_priv.param<double>("slave_workspace_max_y", slave_workspace_max_y, 1.0);
    	n_priv.param<double>("slave_workspace_max_z", slave_workspace_max_z, 1.0);
	Eigen::Vector3d slave_workspace_max(slave_workspace_max_x, slave_workspace_max_y, slave_workspace_max_z);
	Eigen::Vector3d slave_workspace_size=slave_workspace_max-slave_workspace_min;

	double master_workspace_min_x;
	double master_workspace_min_y;
	double master_workspace_min_z;
  	n_priv.param<double>("master_workspace_min_x", master_workspace_min_x, 1.0);
    	n_priv.param<double>("master_workspace_min_y", master_workspace_min_y, 1.0);
    	n_priv.param<double>("master_workspace_min_z", master_workspace_min_z, 1.0);
	Eigen::Vector3d master_workspace_min(master_workspace_min_x, master_workspace_min_y, master_workspace_min_z);
	double master_workspace_max_x;
	double master_workspace_max_y;
	double master_workspace_max_z;
  	n_priv.param<double>("master_workspace_max_x", master_workspace_max_x, 1.0);
    	n_priv.param<double>("master_workspace_max_y", master_workspace_max_y, 1.0);
    	n_priv.param<double>("master_workspace_max_z", master_workspace_max_z, 1.0);
	Eigen::Vector3d master_workspace_max(master_workspace_max_x, master_workspace_max_y, master_workspace_max_z);
	Eigen::Vector3d master_workspace_size=master_workspace_max-master_workspace_min;

	Eigen::Vector3d slave_to_master_scale(fabs(master_workspace_size.x()/slave_workspace_size.x()), fabs(master_workspace_size.y()/slave_workspace_size.y()), fabs(master_workspace_size.z()/slave_workspace_size.z()));

	Eigen::Vector3d master_to_slave_scale(fabs(slave_workspace_size.x()/master_workspace_size.x()), fabs(slave_workspace_size.y()/master_workspace_size.y()), fabs(slave_workspace_size.z()/master_workspace_size.z()));

	bool is_master;
  	n_priv.param<bool>("is_master", is_master, true);
	Controller controller(n, is_master, freq, kp,kd, slave_to_master_scale, master_workspace_min, master_to_slave_scale, slave_workspace_min);

	ros::spin();

	return 0;

 /*





	// Pose topic's name
	std::string pose_topic_name = "/RosAria/pose" ;
	
	// *** I need more topics that I am going to use from the phantom Omni 
  	ros::Publisher force_cmd_pub = n.advertise<phantom_omni::OmniFeedback>("/omni1_force_feedback", 2); ;

  	tf::TransformListener listener;

	// parameters Kp and Kd
	Eigen::Vector3d Kp(0,0,0) ; 
	Eigen::Vector3d Kd(1.0,1.0,1.0) ;  
	Eigen::Vector3d scale_vector(1.0,1.0,1.0) ;  
	//previous_position_of_robot 
    	nav_msgs::Odometry::ConstPtr previous_pose_slave_msg = ros::topic::waitForMessage< nav_msgs::Odometry>(pose_topic_name);
	Eigen::Vector3d previous_pose_slave(previous_pose_slave_msg->twist.twist.linear.x, previous_pose_slave_msg->twist.twist.linear.y,0.0);

	tf::StampedTransform transform;

	try
	{
		listener.lookupTransform("/wrist1", "/base",ros::Time(0), transform);
	}
    	catch (tf::TransformException ex)
	{
      		ROS_ERROR("%s",ex.what());
    	}

	Eigen::Vector3d previous_pose_master(transform.getOrigin().x(),transform.getOrigin().y(),transform.getOrigin().z());
	bool flag = false ; 
	while ( ros::ok() ) 
  	{

	 	try
		{
			listener.lookupTransform("/wrist1", "/base",ros::Time(0), transform);
		}
    		catch (tf::TransformException ex)
		{
      			ROS_ERROR("%s",ex.what());
		}


		// Current position of master (omni)
		Eigen::Vector3d current_pose_master(transform.getOrigin().x() * scale_vector.x(),
						    transform.getOrigin().y() * scale_vector.y(),
						    transform.getOrigin().z() * scale_vector.z());

		std::cout << transform.getOrigin().x() << std::endl;
		// Velocity master (omni)
		Eigen::Vector3d current_velocity_master((current_pose_master.x() - previous_pose_master.x()) * freq,
							(current_pose_master.y() - previous_pose_master.y()) * freq,
		                                         0.0);
		
		// Current position of robot msg
    		nav_msgs::Odometry::ConstPtr current_pose_slave_msg = ros::topic::waitForMessage<nav_msgs::Odometry>(pose_topic_name,ros::Duration (0) );
		
		// Current position robot
		Eigen::Vector3d current_pose_slave( current_pose_slave_msg->twist.twist.linear.x, current_pose_slave_msg->twist.twist.linear.y,0.0);

		// Velocity robot
		Eigen::Vector3d current_velocity_slave((current_pose_slave.x() - current_pose_slave.x()) * freq,
						 (current_pose_slave.y() - current_pose_slave.y()) * freq,
						  0.0);

		Eigen::Matrix<double,3,3>  input_matrix = (current_pose_master - current_pose_slave) * Kp.transpose() + ( current_velocity_master -  current_velocity_slave ) * Kd.transpose();
		
		previous_pose_slave=current_pose_slave;
		previous_pose_master=current_pose_master;
		
		phantom_omni::OmniFeedback force_msg;
		force_msg.force.x=input_matrix(0,0);
		force_msg.force.y=input_matrix(1,1);
		force_msg.force.z=input_matrix(2,2);

		force_cmd_pub.publish(force_msg);
		
		loop_rate.sleep() ;  
	} // end of while loop 

  	//ros::Subscriber sub = n.subscribe("/RosAria/pose", 1, poseCallback);
  	//ros::Subscriber sub2 = n.subscribe("/RosAria/sonar", 1, sonarCallback);


 	return 0;*/
}
