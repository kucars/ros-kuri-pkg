#include <ros/ros.h>
#include <tf/transform_listener.h>
#include <tf/transform_datatypes.h>
#include <nav_msgs/Path.h>

int main(int argc, char** argv){
  ros::init(argc, argv, "my_tf_listener");

  ros::NodeHandle node;

  ros::Publisher path_pub = node.advertise<nav_msgs::Path>("path", 10);

  tf::TransformListener listener;
  nav_msgs::Path path_msg;
  ros::Rate rate(10.0);
  while (node.ok())
  {
    tf::StampedTransform transform;
    try
    {
      listener.lookupTransform("/base_link", "/odom",
                               ros::Time(0), transform);
    }
    catch (tf::TransformException ex)
    {
      ROS_ERROR("%s",ex.what());
    }

    geometry_msgs::PoseStamped odom;
    tf::poseStampedTFToMsg (transform, odom);
 path_msg.poses.push_back(odom);
    
    //tf::poseTFToMsg(transform, odom_path);
    /*turtlesim::Velocity vel_msg;
    vel_msg.angular = 4 * atan2(transform.getOrigin().y(),
                                transform.getOrigin().x());
    vel_msg.linear = 0.5 * sqrt(pow(transform.getOrigin().x(), 2) +
                                 pow(transform.getOrigin().y(), 2));
    turtle_vel.publish(vel_msg);


		tf::Quaternion goal_quat = tf::createQuaternionFromYaw(1.54);

		odom_path.header.frame_id="/odom";

		 odom_path.pose.position.x = GPAS.InitialPoseMessage.pose.pose.position.x+(0.1*i);
		 odom_path.pose.position.y = GPAS.InitialPoseMessage.pose.pose.position.x+(0.1*i);

		 odom_path.pose.orientation.x = 0;
		 odom_path.pose.orientation.y = 0;
		 odom_path.pose.orientation.z = 0;
		 odom_path.pose.orientation.w = 1;

    path_msg*/

    rate.sleep();
  }
  return 0;
};
